{"version":3,"sources":["utils.ts","PeriodsEditorComponent.tsx","DateArrayComponent.tsx","SchedulesEditorComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["calculateRunTime","a","b","aSplit","split","bSplit","length","parseInt","PeriodEditorComponent","props","onTimeChange","event","start","value","startTime","target","endTime","runTime","toString","onChange","ListGroup","Item","Form","Group","controlId","newId","Label","Control","type","placeholder","name","Alert","variant","style","display","className","e","Button","size","onClick","removePeriod","PeriodsEditorComponent","map","p","i","index","key","period","splice","push","DateArrayComponent","toDateValue","valueString","dateObject","Date","isNaN","toISOString","onDateKeyEdit","indices","newValue","valueAsDate","toLocaleDateString","timeZone","v","Array","title","newDate","newDateRange","ScheduleEditorComponent","scheduleTitle","schedule","Card","Header","Accordion","Toggle","as","eventKey","Badge","removeSchedule","Collapse","Body","setSchedule","Check","checked","combinedAB","label","id","undefined","applyDay","multiple","from","selectedOptions","opt","d","selected","includes","newDates","dates","newPeriods","SchedulesEditorComponent","scheduleError","currentSchedules","parse","err","formatSchedules","schedules","JSON","stringify","defaultActiveKey","s","href","NavComponent","Navbar","bg","expand","Brand","aria-controls","Nav","Link","ViewPicker","ButtonGroup","toggle","view","idx","ToggleButton","visiblePane","changeView","EditorComponent","downloadSchedule","mode","theme","width","height","fontSize","App","useState","scheduleString","codeVisible","setCodeVisibility","onScheduleJSONChange","newJSONString","viewElements","fetch","schedulesEndpoint","then","res","text","Container","viewNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9aef817c.chunk.js","sourcesContent":["function calculateRunTime(a: string, b: string): number {\n    const aSplit = a.split(\":\"), bSplit = b.split(\":\");\n    if(aSplit.length === 2 && bSplit.length === 2) {\n        return (parseInt(aSplit[0]) - parseInt(bSplit[0])) * 60 + (parseInt(aSplit[1]) - parseInt(bSplit[1]));\n    }\n    return 0;\n}\n\nexport {\n    calculateRunTime\n};","import React, { ChangeEvent } from \"react\";\nimport { Alert, Button, Form, ListGroup } from \"react-bootstrap\";\nimport { Period } from \"./schedule\";\nimport { v4 as newId } from \"uuid\";\nimport { calculateRunTime } from \"./utils\";\n\ninterface PeriodsEditorComponentProps {\n  onChange: Function,\n  value: Period[]\n}\n\nfunction PeriodsEditorComponent(props: PeriodsEditorComponentProps) {\n\n  function changePeriod(key: number, period: Period) {\n    props.value[key] = period;\n    props.onChange(props.value);\n  }\n\n  function removePeriod(key: number) {\n    props.value.splice(key, 1);\n    props.onChange(props.value);\n  }\n\n  function addNewPeriod() {\n    props.value.push({\n      name: \"New Period\",\n      startTime: \"\",\n      endTime: \"\",\n      runTime: \"0\"\n    });\n    props.onChange(props.value);\n  }\n  \n  return (\n    <>\n      <h3>Periods:</h3>\n      <ListGroup className=\"mb-2\">\n        {props.value.map((p, i) => (\n          <PeriodEditorComponent value={p} index={i} onChange={(p: Period) => changePeriod(i, p)} removePeriod={() => removePeriod(i)} key={i}></PeriodEditorComponent>\n        ))}\n      </ListGroup>\n      <Button variant=\"primary\" onClick={() => addNewPeriod()}>+ Add New Period</Button>\n    </>\n  );\n}\n\ninterface PeriodEditorComponentProps {\n  onChange: Function,\n  value: Period,\n  index: number,\n  removePeriod: Function\n}\n\nfunction PeriodEditorComponent(props: PeriodEditorComponentProps) {\n\n  function onNameChange(event: ChangeEvent<HTMLInputElement>) {\n    props.value.name = event.target.value;\n    props.onChange(props.value);\n  }\n\n  function onTimeChange(event: any, start: boolean = true) {\n    if(start) {\n      props.value.startTime = event.target.value;\n    } else {\n      props.value.endTime = event.target.value;\n    }\n    props.value.runTime =  calculateRunTime(props.value.endTime, props.value.startTime).toString();\n    props.onChange(props.value);\n  }\n\n  return (\n    <>\n      <ListGroup.Item>\n        <Form>\n          <Form.Group controlId={newId()}>\n            <Form.Label>Period Name</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Enter a name\" value={props.value.name} onChange={onNameChange}></Form.Control>\n          </Form.Group>\n          {props.value.endTime <= props.value.startTime ? (\n            <>\n              <Alert variant=\"warning\">Your end time is before or equal to your start time.</Alert>\n            </>\n          ) : null}\n          <Form.Group>\n            <Form.Label style={{display: \"block\"}}>Period Start - End</Form.Label>\n            <Form.Control type=\"time\" value={props.value.startTime} className=\"inline-auto time-width\" onChange={(e) => onTimeChange(e, true)}></Form.Control> - <Form.Control type=\"time\" value={props.value.endTime} className=\"inline-auto time-width\" onChange={(e) => onTimeChange(e, false)}></Form.Control>\n          </Form.Group>\n          <p>Period Run Time: {props.value.runTime}</p>\n        </Form>\n        <Button variant=\"danger\" size=\"sm\" onClick={() => props.removePeriod()}>&times; Delete Period</Button>\n      </ListGroup.Item>\n    </>\n  )\n}\n\nexport default PeriodsEditorComponent;","import React from 'react';\nimport { Alert, Button, Form } from 'react-bootstrap';\n\ninterface DateArrayComponentProps {\n  onChange: Function,\n  value?: string[],\n  index: number\n}\n\nfunction DateArrayComponent(props: DateArrayComponentProps) {\n  function toDateValue(valueString: string): string {\n    const dateObject = new Date(valueString);\n    return !isNaN(dateObject as any) ? dateObject.toISOString().split(\"T\")[0] : \"\";\n  }\n\n  function onDateKeyEdit(indices: number[], event: any) {\n    if(props.value) {\n      const newValue = event.target.valueAsDate.toLocaleDateString(\"en-US\", { timeZone: \"UTC\" });\n      if(indices.length > 1) {\n        // @ts-ignore\n        props.value[indices[0]][indices[1]] = newValue;\n      } else {\n        props.value[indices[0]] = newValue;\n      }\n      props.onChange(props.value);\n    }\n  }\n\n  function removeDateKey(index: number) {\n    if(props.value) {\n      props.value.splice(index, 1);\n      props.onChange(props.value);\n    }\n  }\n\n  function newDateRange() {\n    if(props.value) {\n      // @ts-ignore\n      props.value.push([\"\", \"\"]);\n    }\n    props.onChange(props.value ?? [[\"\", \"\"]]);\n  }\n\n  function newDate() {\n    if(props.value) {\n      props.value.push(\"\");\n    }\n    props.onChange(props.value ?? [\"\"]);\n  }\n  \n  return (\n    <>\n      <h5>Dates:</h5>\n      {props.index === 0 ? (\n        <Alert variant=\"secondary\">On the default schedule, dates override schedules that apply on a certain day of the week.</Alert>\n      ) : null}\n      {props.value ? props.value.map((v: string | string[], i) => (\n        <div key={i} className=\"mb-2\">\n          {v instanceof Array ? (\n            <>\n              {toDateValue(v[1]) <= toDateValue(v[0]) ? (\n                <Alert variant=\"warning\">Your end date is before or on your start date.</Alert>\n              ) : null}\n              <Form.Control type=\"date\" value={toDateValue(v[0])} className=\"inline-auto\" onChange={(e) => onDateKeyEdit([i, 0], e)}></Form.Control> - <Form.Control type=\"date\" value={toDateValue(v[1])} className=\"inline-auto\" onChange={(e) => onDateKeyEdit([i, 1], e)}></Form.Control>\n            </>\n          ) : (\n            <Form.Control type=\"date\" value={toDateValue(v)} className=\"inline-auto\" onChange={(e) => onDateKeyEdit([i], e)}></Form.Control>\n          )}\n          <Button variant=\"danger\" className=\"ml-3\" title=\"Remove\" onClick={() => removeDateKey(i)}>&times;</Button>\n        </div>\n      )) : null}\n      <Button variant=\"primary\" onClick={() => newDate()}>+ Add new date</Button>\n      <Button variant=\"primary\" className=\"ml-3\" onClick={() => newDateRange()}>+ Add new date range</Button>\n    </>\n  );\n}\n\nexport default DateArrayComponent;\n","import React, { MouseEvent, ChangeEvent } from 'react';\nimport { Accordion, Alert, Badge, Button, Card, Form } from \"react-bootstrap\";\nimport { parse } from \"@prantlf/jsonlint\";\nimport { Period, Schedule } from \"./schedule\";\nimport PeriodsEditorComponent from './PeriodsEditorComponent';\nimport DateArrayComponent from \"./DateArrayComponent\";\nimport { v4 as newId } from \"uuid\";\n\ninterface SchedulesEditorProps {\n  onChange: Function,\n  value: string\n}\n\nfunction SchedulesEditorComponent(props: SchedulesEditorProps) {\n  let scheduleError = \"\";\n\n  let currentSchedules: Schedule[] = [];\n  try {\n    currentSchedules = parse(props.value) as Schedule[];\n  } catch(err) {\n    scheduleError = err.toString();\n  }\n\n  function formatSchedules(schedules: Schedule[]) {\n    return JSON.stringify(schedules, null, 4);\n  }\n\n  function addNewSchedule(event: MouseEvent) {\n    currentSchedules.push({\n      \"name\": \"New Schedule\",\n      \"combinedAB\": false,\n      \"dates\": [],\n      \"schedule\": []\n    });\n    props.onChange(formatSchedules(currentSchedules));\n  }\n\n  function setSchedule(key: number, schedule: Schedule) {\n    currentSchedules[key] = schedule;\n    props.onChange(formatSchedules(currentSchedules));\n  }\n\n  function removeSchedule(index: number) {\n    currentSchedules.splice(index, 1);\n    props.onChange(formatSchedules(currentSchedules));\n  }\n\n  return (\n    <>\n      <h3>Edit your schedules here.</h3>\n      {scheduleError ? (\n        <>\n          <Alert variant=\"danger\">\n            <p>Sorry, your schedule could not be parsed. Please fix the JSON on the left to continue.</p>\n            <p className=\"mb-0\"><b>Error Message:</b></p>\n            <pre>{scheduleError}</pre>\n          </Alert>\n        </>\n      ) : (\n        <>\n          <p><Button variant=\"primary\" onClick={addNewSchedule}>+ Add New Schedule</Button></p>\n          <Accordion defaultActiveKey=\"0\" className=\"mb-3\">\n            {currentSchedules.map((schedule, i) => (<ScheduleEditorComponent schedule={schedule} setSchedule={(s: Schedule) => setSchedule(i, s)} key={i} index={i} removeSchedule={() => removeSchedule(i)}></ScheduleEditorComponent>))}\n          </Accordion>\n          <p>Once you're done editing your schedules here, head back over to the JSON Code tab and copy and paste your newly-created schedules into the <a href=\"https://github.com/camtheman256/lasa-schedules-data\">LASA Schedules Data repository</a>.</p>\n        </>\n      )}\n    </>\n  );\n}\n\ninterface ScheduleEditorProps {\n    schedule: Schedule,\n    setSchedule: Function,\n    index: number,\n    removeSchedule: Function\n}\n\nfunction ScheduleEditorComponent(props: ScheduleEditorProps) {\n  const scheduleTitle = props.schedule.name ? props.schedule.name : \"Untitled\";\n\n  function onScheduleNameChange(event: ChangeEvent<HTMLInputElement>) {\n    props.schedule.name = event.target.value;\n    props.setSchedule(props.schedule);\n  }\n\n  function onScheduleABChange(event: ChangeEvent<HTMLInputElement>) {\n    props.schedule.combinedAB = event.target.checked;\n    props.setSchedule(props.schedule);\n  }\n\n  function onScheduleDatesChange(newDates: string[]) {\n    props.schedule.dates = newDates;\n    props.setSchedule(props.schedule);\n  }\n\n  function changeApplyDayVisibility(event: ChangeEvent<HTMLInputElement>) {\n    props.schedule.applyDay = event.target.checked ? [1] : undefined;\n    props.setSchedule(props.schedule);\n  }\n\n  function setApplyDay(event: ChangeEvent<HTMLSelectElement>) {\n    props.schedule.applyDay = Array.from(event.target.selectedOptions, opt => parseInt(opt.value));\n    props.setSchedule(props.schedule);\n  }\n\n  function onPeriodsChange(newPeriods: Period[]) {\n    props.schedule.schedule = newPeriods;\n    props.setSchedule(props.schedule);\n  }\n\n  const daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n\n  return (\n    <>\n      <Card>\n        <Card.Header>\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey={props.index.toString()}>\n            #{props.index}: {scheduleTitle}\n            {props.index === 0 ? (<Badge variant=\"primary\" className=\"ml-2\">Default</Badge>) : null}\n          </Accordion.Toggle>\n          <Button className=\"float-right\" variant=\"danger\" onClick={() => props.removeSchedule()}>&times;</Button>\n        </Card.Header>\n        <Accordion.Collapse eventKey={props.index.toString()}>\n          <Card.Body>\n            {props.index === 0 ? (\n              <Alert variant=\"info\">This schedule is the default schedule, so it's always used when a special schedule is not in place.</Alert>\n            ) : null}\n            <Form>\n              <Form.Group controlId={newId()}>\n                <Form.Label>Schedule Name</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter a name\" value={props.schedule.name} onChange={onScheduleNameChange}></Form.Control>\n              </Form.Group>\n              <Form.Check checked={props.schedule.combinedAB || false} label=\"Combined A/B Period Names?\" onChange={onScheduleABChange} type=\"checkbox\"\n                id={newId()}\n              ></Form.Check>\n              <Form.Check checked={props.schedule.applyDay !== undefined} label=\"Apply schedule on a certain day(s) of the week?\" type=\"checkbox\"\n                id={newId()} onChange={changeApplyDayVisibility}\n              ></Form.Check>\n              {props.schedule.applyDay !== undefined ? (\n                <Form.Control as=\"select\" multiple id={newId()} onChange={setApplyDay}>\n                  {daysOfWeek.map((d, i) => (<option value={(i+1).toString()} key={i} selected={props.schedule.applyDay && props.schedule.applyDay.includes(i+1)}>{i+1} - {d}</option>))}\n                </Form.Control>\n              ) : null}\n              <hr />\n              <DateArrayComponent onChange={onScheduleDatesChange} value={props.schedule.dates} index={props.index}></DateArrayComponent>\n            </Form>\n            <hr />\n            <PeriodsEditorComponent onChange={onPeriodsChange} value={props.schedule.schedule}></PeriodsEditorComponent>\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </>\n  );\n}\n\nexport default SchedulesEditorComponent;\n","import React, { MouseEvent, useState } from 'react';\nimport { Button, ButtonGroup, Container, Nav, Navbar, ToggleButton } from \"react-bootstrap\";\nimport AceEditor from \"react-ace\";\nimport SchedulesEditorComponent from \"./SchedulesEditorComponent\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport \"ace-builds/src-min-noconflict/mode-json\";\nimport \"ace-builds/src-min-noconflict/theme-github\";\n\nfunction App() {\n  const [scheduleString, setSchedule] = useState(\"[]\");\n  const schedulesEndpoint = \"https://schedules-data.lasa2019.com\";\n  const [codeVisible, setCodeVisibility] = useState(0);\n\n  function onScheduleJSONChange(newJSONString: string) {\n    setSchedule(newJSONString);\n  }\n\n  function downloadSchedule() {\n    fetch(schedulesEndpoint + \"/schedule.json\")\n      .then(res => res.text())\n      .then(text => setSchedule(text));\n  }\n\n  function changeView(viewNumber: number) {\n    setCodeVisibility(viewNumber);\n  }\n\n  const viewElements = [\n    <EditorComponent onChange={onScheduleJSONChange} value={scheduleString} downloadSchedule={downloadSchedule}></EditorComponent>,\n    <SchedulesEditorComponent onChange={onScheduleJSONChange} value={scheduleString}></SchedulesEditorComponent>\n  ];\n\n  return (\n    <>\n      <NavComponent></NavComponent>\n      <Container className=\"mt-3\">\n        <ViewPicker changeView={changeView} visiblePane={codeVisible}></ViewPicker>\n        <hr />\n        {viewElements[codeVisible]}\n      </Container>\n    </>\n  );\n}\n\nfunction NavComponent() {\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"md\">\n        <Navbar.Brand>LASA Schedules Editor</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"navbar\" />\n        <Navbar.Collapse id=\"navbar\">\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"https://github.com/camtheman256/lasa-schedules-data/blob/master/README.md\" target=\"_blank\">↗ Schedules Documentation</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n}\n\ninterface ViewPickerProps {\n  changeView: Function,\n  visiblePane: number\n}\n\nfunction ViewPicker(props: ViewPickerProps) {\n  \n  const views = [\n    { name: 'JSON Code', value: 0 },\n    { name: 'Graphical Editor', value: 1 }\n  ];\n\n  return (\n    <>\n      <div>\n        <h3 style={{display: \"inline\"}}>Pick a view to edit your schedules:</h3>\n        <ButtonGroup toggle className=\"ml-3\">\n          {views.map((view, idx) => (\n            <ToggleButton\n              key={idx}\n              type=\"radio\"\n              variant=\"primary\"\n              checked={props.visiblePane === view.value}\n              value={view.value}\n              onChange={() => props.changeView(view.value)}\n            >\n              {view.name}\n            </ToggleButton>\n          ))}\n        </ButtonGroup>\n      </div>\n    </>\n  );\n}\n\ninterface EditorProps {\n  onChange: Function,\n  value: string,\n  downloadSchedule: Function\n}\n\nfunction EditorComponent(props: EditorProps) {\n  \n  function editorChange(value: string, event: Event) {\n    props.onChange(value);\n  }\n\n  function downloadSchedule(event: MouseEvent) {\n    props.downloadSchedule();\n  }\n\n  return (\n    <>\n      <h3>Paste your schedules JSON here.</h3>\n      <p><Button variant=\"link\" onClick={downloadSchedule}>Or, download the live schedules from the LASA Schedules API.</Button></p>\n      <AceEditor\n        mode=\"json\"\n        theme=\"github\"\n        value={props.value}\n        onChange={editorChange}\n        width=\"auto\"\n        height=\"750px\"\n        fontSize={14}\n      ></AceEditor>\n    </>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}