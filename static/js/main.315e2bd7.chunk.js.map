{"version":3,"sources":["SchedulesEditorComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ScheduleEditorComponent","props","schedule","name","SchedulesEditorComponent","scheduleError","currentSchedules","JSON","parse","value","err","toString","Alert","variant","className","Button","onClick","event","map","NavComponent","Navbar","bg","Brand","Collapse","Nav","Link","href","target","EditorComponent","downloadSchedule","mode","theme","onChange","width","height","fontSize","App","useState","scheduleString","setSchedule","onScheduleJSONChange","newJSONString","Container","fluid","Row","Col","md","fetch","schedulesEndpoint","then","res","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wVA+CA,SAASA,EAAwBC,GAC/B,OACE,oCACE,uCAAaA,EAAMC,SAASC,KAAOF,EAAMC,SAASC,KAAO,WAAzD,cAKSC,MA9Cf,SAAkCH,GAChC,IAAII,EAAgB,GAEhBC,EAA+B,GACnC,IACEA,EAAmBC,KAAKC,MAAMP,EAAMQ,OACpC,MAAMC,GACNL,EAAgBK,EAAIC,WAOtB,OACE,oCACE,yDACCN,EACC,oCACE,kBAACO,EAAA,EAAD,CAAOC,QAAQ,UACb,qHACA,uBAAGC,UAAU,QAAO,6CAApB,IAA2CT,KAI/C,oCACE,2BAAG,kBAACU,EAAA,EAAD,CAAQF,QAAQ,UAAUG,QAhBrC,SAAwBC,MAgBb,uBACFX,EAAiBY,KAAI,SAAAhB,GAAQ,OAAK,kBAACF,EAAD,CAAyBE,SAAUA,U,wBCMhF,SAASiB,IACP,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,SACT,kBAACD,EAAA,EAAOE,MAAR,8BACA,kBAACF,EAAA,EAAOG,SAAR,KACE,kBAACC,EAAA,EAAD,CAAKV,UAAU,WACb,kBAACU,EAAA,EAAIC,KAAL,CAAUC,KAAK,4EAA4EC,OAAO,UAAlG,sCAcZ,SAASC,EAAgB3B,GAUvB,OACE,oCACE,+DACA,2BAAG,kBAACc,EAAA,EAAD,CAAQF,QAAQ,OAAOG,QAP9B,SAA0BC,GACxBhB,EAAM4B,qBAMD,iEACH,kBAAC,IAAD,CACEC,KAAK,OACLC,MAAM,SACNtB,MAAOR,EAAMQ,MACbuB,SAhBN,SAAsBvB,EAAeQ,GACnChB,EAAM+B,SAASvB,IAgBXwB,MAAM,OACNC,OAAO,QACPC,SAAU,MAOHC,MAhFf,WAAgB,IAAD,EACyBC,mBAAS,MADlC,mBACNC,EADM,KACUC,EADV,KAIb,SAASC,EAAqBC,GAC5BF,EAAYE,GASd,OACE,oCACE,kBAACtB,EAAD,MACA,kBAACuB,EAAA,EAAD,CAAW5B,UAAU,OAAO6B,OAAK,GAC/B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAClB,EAAD,CAAiBI,SAAUQ,EAAsB/B,MAAO6B,EAAgBT,iBAZlF,WACEkB,MAAMC,qDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIZ,EAAYY,UAWtB,kBAACN,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,EAAD,CAA0Bd,SAAUQ,EAAsB/B,MAAO6B,SCtBzDc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.315e2bd7.chunk.js","sourcesContent":["import React, { SyntheticEvent } from 'react';\nimport { Alert, Button } from \"react-bootstrap\";\nimport { Schedule } from \"./schedule\";\n\ninterface SchedulesEditorProps {\n  onChange: Function,\n  value: string\n}\n\nfunction SchedulesEditorComponent(props: SchedulesEditorProps) {\n  let scheduleError = \"\";\n\n  let currentSchedules: Schedule[] = [];\n  try {\n    currentSchedules = JSON.parse(props.value);\n  } catch(err) {\n    scheduleError = err.toString();\n  }\n\n  function addNewSchedule(event: SyntheticEvent) {\n\n  }\n\n  return (\n    <>\n      <h3>Edit your Schedules here.</h3>\n      {scheduleError ? (\n        <>\n          <Alert variant=\"danger\">\n            <p>Sorry, your schedule could not be parsed. Please fix the JSON on the left to continue.</p>\n            <p className=\"mb-0\"><b>Error Message:</b> {scheduleError}</p>\n          </Alert>\n        </>\n      ) : (\n        <>\n          <p><Button variant=\"primary\" onClick={addNewSchedule}>+ Add New Schedule</Button></p>\n          {currentSchedules.map(schedule => (<ScheduleEditorComponent schedule={schedule}></ScheduleEditorComponent>))}\n        </>\n      )}\n    </>\n  );\n}\n\ninterface ScheduleEditorProps {\n    schedule: Schedule\n}\n\nfunction ScheduleEditorComponent(props: ScheduleEditorProps) {\n  return (\n    <>\n      <p>Schedule {props.schedule.name ? props.schedule.name : \"Untitled\"} is here.</p>\n    </>\n  );\n}\n\nexport default SchedulesEditorComponent;","import React, { SyntheticEvent, useState } from 'react';\nimport { Button, Col, Container, Nav, Navbar, Row } from \"react-bootstrap\";\nimport AceEditor from \"react-ace\";\nimport SchedulesEditorComponent from \"./SchedulesEditorComponent\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport \"ace-builds/src-min-noconflict/mode-json\";\nimport \"ace-builds/src-min-noconflict/theme-github\";\n\nfunction App() {\n  const [scheduleString, setSchedule] = useState(\"[]\");\n  const schedulesEndpoint = \"https://schedules-data.lasa2019.com\";\n  \n  function onScheduleJSONChange(newJSONString: string) {\n    setSchedule(newJSONString);\n  }\n\n  function downloadSchedule() {\n    fetch(schedulesEndpoint + \"/schedule.json\")\n      .then(res => res.text())\n      .then(text => setSchedule(text));\n  }\n\n  return (\n    <>\n      <NavComponent></NavComponent>\n      <Container className=\"mt-3\" fluid>\n        <Row>\n          <Col md=\"6\">\n            <EditorComponent onChange={onScheduleJSONChange} value={scheduleString} downloadSchedule={downloadSchedule}></EditorComponent>\n          </Col>\n          <Col md=\"6\">\n            <SchedulesEditorComponent onChange={onScheduleJSONChange} value={scheduleString}></SchedulesEditorComponent>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nfunction NavComponent() {\n  return (\n    <>\n      <Navbar bg=\"light\">\n        <Navbar.Brand>LASA Schedules Editor</Navbar.Brand>\n        <Navbar.Collapse>\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"https://github.com/camtheman256/lasa-schedules-data/blob/master/README.md\" target=\"_blank\">â†— Schedules Documentation</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n}\n\ninterface EditorProps {\n  onChange: Function,\n  value: string,\n  downloadSchedule: Function\n}\n\nfunction EditorComponent(props: EditorProps) {\n  \n  function editorChange(value: string, event: Event) {\n    props.onChange(value);\n  }\n\n  function downloadSchedule(event: SyntheticEvent) {\n    props.downloadSchedule();\n  }\n\n  return (\n    <>\n      <h3>Paste your schedules JSON here.</h3>\n      <p><Button variant=\"link\" onClick={downloadSchedule}>Or, download the live schedules from the LASA Schedules API.</Button></p>\n      <AceEditor\n        mode=\"json\"\n        theme=\"github\"\n        value={props.value}\n        onChange={editorChange}\n        width=\"auto\"\n        height=\"750px\"\n        fontSize={14}\n      ></AceEditor>\n    </>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}