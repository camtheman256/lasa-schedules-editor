{"version":3,"sources":["SchedulesEditorComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ScheduleEditorComponent","props","scheduleTitle","schedule","name","Card","Header","Accordion","Toggle","as","Button","variant","eventKey","index","toString","Collapse","Body","Form","Group","controlId","Label","Control","type","placeholder","value","onChange","event","target","setSchedule","SchedulesEditorComponent","scheduleError","currentSchedules","parse","err","Alert","className","onClick","defaultActiveKey","map","i","s","key","JSON","stringify","NavComponent","Navbar","bg","expand","Brand","aria-controls","id","Nav","Link","href","EditorComponent","downloadSchedule","mode","theme","width","height","fontSize","App","useState","scheduleString","codeVisible","setCodeVisibility","onScheduleJSONChange","newJSONString","viewElements","fetch","schedulesEndpoint","then","res","text","Container","style","display","ButtonGroup","toggle","view","idx","ToggleButton","checked","viewNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc691569.chunk.js","sourcesContent":["import React, { MouseEvent, ChangeEvent } from 'react';\nimport { Accordion, Alert, Button, Card, Form } from \"react-bootstrap\";\nimport { parse } from \"@prantlf/jsonlint\";\nimport { Schedule } from \"./schedule\";\n\ninterface SchedulesEditorProps {\n  onChange: Function,\n  value: string\n}\n\nfunction SchedulesEditorComponent(props: SchedulesEditorProps) {\n  let scheduleError = \"\";\n\n  let currentSchedules: Schedule[] = [];\n  try {\n    currentSchedules = parse(props.value) as Schedule[];\n  } catch(err) {\n    scheduleError = err.toString();\n  }\n\n  function addNewSchedule(event: MouseEvent) {\n\n  }\n\n  function setSchedule(key: number, schedule: Schedule) {\n    currentSchedules[key] = schedule;\n    props.onChange(JSON.stringify(currentSchedules, null, 4));\n  }\n\n  return (\n    <>\n      <h3>Edit your schedules here.</h3>\n      {scheduleError ? (\n        <>\n          <Alert variant=\"danger\">\n            <p>Sorry, your schedule could not be parsed. Please fix the JSON on the left to continue.</p>\n            <p className=\"mb-0\"><b>Error Message:</b></p>\n            <pre>{scheduleError}</pre>\n          </Alert>\n        </>\n      ) : (\n        <>\n          <p><Button variant=\"primary\" onClick={addNewSchedule}>+ Add New Schedule</Button></p>\n          <Accordion defaultActiveKey=\"0\">\n            {currentSchedules.map((schedule, i) => (<ScheduleEditorComponent schedule={schedule} setSchedule={(s: Schedule) => setSchedule(i, s)} key={i} index={i}></ScheduleEditorComponent>))}\n          </Accordion>\n        </>\n      )}\n    </>\n  );\n}\n\ninterface ScheduleEditorProps {\n    schedule: Schedule,\n    setSchedule: Function,\n    index: number\n}\n\nfunction ScheduleEditorComponent(props: ScheduleEditorProps) {\n  const scheduleTitle = props.schedule.name ? props.schedule.name : \"Untitled\";\n\n  function onScheduleNameChange(event: ChangeEvent<HTMLInputElement>) {\n    props.schedule.name = event.target.value;\n    props.setSchedule(props.schedule);\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Header>\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey={props.index.toString()}>\n            #{props.index}: {scheduleTitle}\n          </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey={props.index.toString()}>\n          <Card.Body>\n            <Form>\n              <Form.Group controlId={`name-${props.index}`}>\n                <Form.Label>Schedule Name</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter a name\" value={props.schedule.name} onChange={onScheduleNameChange}></Form.Control>\n              </Form.Group>\n            </Form>\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </>\n  );\n}\n\nexport default SchedulesEditorComponent;\n","import React, { MouseEvent, useState } from 'react';\nimport { Button, ButtonGroup, Container, Nav, Navbar, ToggleButton } from \"react-bootstrap\";\nimport AceEditor from \"react-ace\";\nimport SchedulesEditorComponent from \"./SchedulesEditorComponent\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport \"ace-builds/src-min-noconflict/mode-json\";\nimport \"ace-builds/src-min-noconflict/theme-github\";\n\nfunction App() {\n  const [scheduleString, setSchedule] = useState(\"[]\");\n  const schedulesEndpoint = \"https://schedules-data.lasa2019.com\";\n  const [codeVisible, setCodeVisibility] = useState(0);\n  \n  function onScheduleJSONChange(newJSONString: string) {\n    setSchedule(newJSONString);\n  }\n\n  function downloadSchedule() {\n    fetch(schedulesEndpoint + \"/schedule.json\")\n      .then(res => res.text())\n      .then(text => setSchedule(text));\n  }\n\n  const views = [\n    { name: 'JSON Code', value: 0 },\n    { name: 'Graphical Editor', value: 1 }\n  ];\n\n  function changeView(viewNumber: number) {\n    setCodeVisibility(viewNumber);\n  }\n\n  const viewElements = [\n    <EditorComponent onChange={onScheduleJSONChange} value={scheduleString} downloadSchedule={downloadSchedule}></EditorComponent>,\n    <SchedulesEditorComponent onChange={onScheduleJSONChange} value={scheduleString}></SchedulesEditorComponent>\n  ]\n\n  return (\n    <>\n      <NavComponent></NavComponent>\n      <Container className=\"mt-3\">\n        <div>\n          <h3 style={{display: \"inline\"}}>Pick a view to edit your schedules:</h3>\n          <ButtonGroup toggle className=\"ml-3\">\n            {views.map((view, idx) => (\n              <ToggleButton\n                key={idx}\n                type=\"radio\"\n                variant=\"primary\"\n                checked={codeVisible === view.value}\n                value={view.value}\n                onChange={() => changeView(view.value)}\n              >\n                {view.name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </div>\n        <hr />\n        {viewElements[codeVisible]}\n      </Container>\n    </>\n  );\n}\n\nfunction NavComponent() {\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"md\">\n        <Navbar.Brand>LASA Schedules Editor</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"navbar\" />\n        <Navbar.Collapse id=\"navbar\">\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"https://github.com/camtheman256/lasa-schedules-data/blob/master/README.md\" target=\"_blank\">â†— Schedules Documentation</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n}\n\ninterface EditorProps {\n  onChange: Function,\n  value: string,\n  downloadSchedule: Function\n}\n\nfunction EditorComponent(props: EditorProps) {\n  \n  function editorChange(value: string, event: Event) {\n    props.onChange(value);\n  }\n\n  function downloadSchedule(event: MouseEvent) {\n    props.downloadSchedule();\n  }\n\n  return (\n    <>\n      <h3>Paste your schedules JSON here.</h3>\n      <p><Button variant=\"link\" onClick={downloadSchedule}>Or, download the live schedules from the LASA Schedules API.</Button></p>\n      <AceEditor\n        mode=\"json\"\n        theme=\"github\"\n        value={props.value}\n        onChange={editorChange}\n        width=\"auto\"\n        height=\"750px\"\n        fontSize={14}\n      ></AceEditor>\n    </>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}