{"version":3,"sources":["PeriodsEditorComponent.tsx","SchedulesEditorComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PeriodsEditorComponent","props","ScheduleEditorComponent","scheduleTitle","schedule","name","Card","Header","Accordion","Toggle","as","Button","variant","eventKey","index","toString","Badge","className","Collapse","Body","Alert","Form","Group","controlId","Label","Control","type","placeholder","value","onChange","event","target","setSchedule","Check","checked","combinedAB","label","id","undefined","applyDay","parseInt","map","d","i","key","DateArrayComponent","newDates","dates","newPeriods","toDateValue","valueString","dateObject","Date","isNaN","toISOString","split","onDateKeyEdit","indices","newValue","valueAsDate","toLocaleDateString","timeZone","length","v","Array","e","title","onClick","splice","push","newDate","newDateRange","SchedulesEditorComponent","scheduleError","currentSchedules","parse","err","JSON","stringify","defaultActiveKey","s","href","NavComponent","Navbar","bg","expand","Brand","aria-controls","Nav","Link","ViewPicker","style","display","ButtonGroup","toggle","view","idx","ToggleButton","visiblePane","changeView","EditorComponent","downloadSchedule","mode","theme","width","height","fontSize","App","useState","scheduleString","codeVisible","setCodeVisibility","onScheduleJSONChange","newJSONString","viewElements","fetch","schedulesEndpoint","then","res","text","Container","viewNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.35b545ff.chunk.js","sourcesContent":["import React from \"react\";\nimport { Period } from \"./schedule\";\n\ninterface PeriodsEditorComponentProps {\n  onChange: Function,\n  value: Period[]\n}\n\nfunction PeriodsEditorComponent(props: PeriodsEditorComponentProps) {\n  \n  return (\n    <>\n      <h3>Periods:</h3>\n    </>\n  )\n}\n\nexport default PeriodsEditorComponent;","import React, { MouseEvent, ChangeEvent } from 'react';\nimport { Accordion, Alert, Badge, Button, Card, Form } from \"react-bootstrap\";\nimport { parse } from \"@prantlf/jsonlint\";\nimport { Period, Schedule } from \"./schedule\";\nimport PeriodsEditorComponent from './PeriodsEditorComponent';\n\ninterface SchedulesEditorProps {\n  onChange: Function,\n  value: string\n}\n\nfunction SchedulesEditorComponent(props: SchedulesEditorProps) {\n  let scheduleError = \"\";\n\n  let currentSchedules: Schedule[] = [];\n  try {\n    currentSchedules = parse(props.value) as Schedule[];\n  } catch(err) {\n    scheduleError = err.toString();\n  }\n\n  function addNewSchedule(event: MouseEvent) {\n    currentSchedules.push({\n      \"name\": \"New Schedule\",\n      \"combinedAB\": false,\n      \"dates\": [],\n      \"schedule\": []\n    });\n    props.onChange(JSON.stringify(currentSchedules, null, 4));\n  }\n\n  function setSchedule(key: number, schedule: Schedule) {\n    currentSchedules[key] = schedule;\n    props.onChange(JSON.stringify(currentSchedules, null, 4));\n  }\n\n  return (\n    <>\n      <h3>Edit your schedules here.</h3>\n      {scheduleError ? (\n        <>\n          <Alert variant=\"danger\">\n            <p>Sorry, your schedule could not be parsed. Please fix the JSON on the left to continue.</p>\n            <p className=\"mb-0\"><b>Error Message:</b></p>\n            <pre>{scheduleError}</pre>\n          </Alert>\n        </>\n      ) : (\n        <>\n          <p><Button variant=\"primary\" onClick={addNewSchedule}>+ Add New Schedule</Button></p>\n          <Accordion defaultActiveKey=\"0\" className=\"mb-3\">\n            {currentSchedules.map((schedule, i) => (<ScheduleEditorComponent schedule={schedule} setSchedule={(s: Schedule) => setSchedule(i, s)} key={i} index={i}></ScheduleEditorComponent>))}\n          </Accordion>\n          <p>Once you're done editing your schedules here, head back over to the JSON Code tab and copy and paste your newly-created schedules into the <a href=\"https://github.com/camtheman256/lasa-schedules-data\">LASA Schedules Data repository</a>.</p>\n        </>\n      )}\n    </>\n  );\n}\n\ninterface ScheduleEditorProps {\n    schedule: Schedule,\n    setSchedule: Function,\n    index: number\n}\n\nfunction ScheduleEditorComponent(props: ScheduleEditorProps) {\n  const scheduleTitle = props.schedule.name ? props.schedule.name : \"Untitled\";\n\n  function onScheduleNameChange(event: ChangeEvent<HTMLInputElement>) {\n    props.schedule.name = event.target.value;\n    props.setSchedule(props.schedule);\n  }\n\n  function onScheduleABChange(event: ChangeEvent<HTMLInputElement>) {\n    props.schedule.combinedAB = event.target.checked;\n    props.setSchedule(props.schedule);\n  }\n\n  function onScheduleDatesChange(newDates: string[]) {\n    props.schedule.dates = newDates;\n    props.setSchedule(props.schedule);\n  }\n\n  function changeApplyDayVisibility(event: ChangeEvent<HTMLInputElement>) {\n    props.schedule.applyDay = event.target.checked ? 1 : undefined;\n    props.setSchedule(props.schedule);\n  }\n\n  function setApplyDay(event: ChangeEvent<HTMLInputElement>) {\n    props.schedule.applyDay = parseInt(event.target.value);\n    props.setSchedule(props.schedule);\n  }\n\n  function onPeriodsChange(newPeriods: Period[]) {\n    props.schedule.schedule = newPeriods;\n    props.setSchedule(props.schedule);\n  }\n\n  const daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n\n  return (\n    <>\n      <Card>\n        <Card.Header>\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey={props.index.toString()}>\n            #{props.index}: {scheduleTitle}\n            {props.index === 0 ? (<Badge variant=\"primary\" className=\"ml-2\">Default</Badge>) : null}\n          </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey={props.index.toString()}>\n          <Card.Body>\n            {props.index === 0 ? (\n              <Alert variant=\"info\">This schedule is the default schedule, so it's always used when a special schedule is not in place.</Alert>\n            ) : null}\n            <Form>\n              <Form.Group controlId={`name-${props.index}`}>\n                <Form.Label>Schedule Name</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter a name\" value={props.schedule.name} onChange={onScheduleNameChange}></Form.Control>\n              </Form.Group>\n              <Form.Check checked={props.schedule.combinedAB || false} label=\"Combined A/B Periods?\" onChange={onScheduleABChange} type=\"checkbox\"\n                id={`combined-${props.index}`}\n              ></Form.Check>\n              <Form.Check checked={props.schedule.applyDay !== undefined} label=\"Apply schedule on a certain day of the week?\" type=\"checkbox\"\n                id={`apply-on-${props.index}`} onChange={changeApplyDayVisibility}\n              ></Form.Check>\n              {props.schedule.applyDay !== undefined ? (\n                <Form.Control as=\"select\" value={props.schedule.applyDay} id={`apply-${props.index}`} onChange={setApplyDay}>\n                  {daysOfWeek.map((d, i) => (<option value={(i+1).toString()} key={i}>{i+1} - {d}</option>))}\n                </Form.Control>\n              ) : null}\n              <hr />\n              <DateArrayComponent onChange={onScheduleDatesChange} value={props.schedule.dates} index={props.index}></DateArrayComponent>\n            </Form>\n            <hr />\n            <PeriodsEditorComponent onChange={onPeriodsChange} value={props.schedule.schedule}></PeriodsEditorComponent>\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </>\n  );\n}\n\ninterface DateArrayComponentProps {\n  onChange: Function,\n  value?: string[],\n  index: number\n}\n\nfunction DateArrayComponent(props: DateArrayComponentProps) {\n  function toDateValue(valueString: string): string {\n    const dateObject = new Date(valueString);\n    return !isNaN(dateObject as any) ? dateObject.toISOString().split(\"T\")[0] : \"\";\n  }\n\n  function onDateKeyEdit(indices: number[], event: any) {\n    if(props.value) {\n      const newValue = event.target.valueAsDate.toLocaleDateString(undefined, { timeZone: \"UTC\" });\n      if(indices.length > 1) {\n        // @ts-ignore\n        props.value[indices[0]][indices[1]] = newValue;\n      } else {\n        props.value[indices[0]] = newValue;\n      }\n      props.onChange(props.value);\n    }\n  }\n\n  function removeDateKey(index: number) {\n    if(props.value) {\n      props.value.splice(index, 1);\n      props.onChange(props.value);\n    }\n  }\n\n  function newDateRange() {\n    if(props.value) {\n      // @ts-ignore\n      props.value.push([\"\", \"\"]);\n    }\n    props.onChange(props.value ?? [[\"\", \"\"]]);\n  }\n\n  function newDate() {\n    if(props.value) {\n      props.value.push(\"\");\n    }\n    props.onChange(props.value ?? [\"\"]);\n  }\n  \n  return (\n    <>\n      <h5>Dates:</h5>\n      {props.index === 0 ? (\n        <Alert variant=\"secondary\">Dates have no effect on the default schedule. Feel free to ignore.</Alert>\n      ) : null}\n      {props.value ? props.value.map((v: string | string[], i) => (\n        <div key={i} className=\"mb-2\">\n          {v instanceof Array ? (\n            <>\n              {toDateValue(v[1]) <= toDateValue(v[0]) ? (\n                <Alert variant=\"warning\">Your end date is before or on your start date.</Alert>\n              ) : null}\n              <Form.Control type=\"date\" value={toDateValue(v[0])} className=\"inline-auto\" onChange={(e) => onDateKeyEdit([i, 0], e)}></Form.Control> - <Form.Control type=\"date\" value={toDateValue(v[1])} className=\"inline-auto\" onChange={(e) => onDateKeyEdit([i, 1], e)}></Form.Control>\n            </>\n          ) : (\n            <Form.Control type=\"date\" value={toDateValue(v)} className=\"inline-auto\" onChange={(e) => onDateKeyEdit([i], e)}></Form.Control>\n          )}\n          <Button variant=\"danger\" className=\"ml-3\" title=\"Remove\" onClick={() => removeDateKey(i)}>&times;</Button>\n        </div>\n      )) : null}\n      <Button variant=\"primary\" onClick={() => newDate()}>+ Add new date</Button>\n      <Button variant=\"primary\" className=\"ml-3\" onClick={() => newDateRange()}>+ Add new date range</Button>\n    </>\n  );\n}\n\nexport default SchedulesEditorComponent;\n","import React, { MouseEvent, useState } from 'react';\nimport { Button, ButtonGroup, Container, Nav, Navbar, ToggleButton } from \"react-bootstrap\";\nimport AceEditor from \"react-ace\";\nimport SchedulesEditorComponent from \"./SchedulesEditorComponent\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport \"ace-builds/src-min-noconflict/mode-json\";\nimport \"ace-builds/src-min-noconflict/theme-github\";\n\nfunction App() {\n  const [scheduleString, setSchedule] = useState(\"[]\");\n  const schedulesEndpoint = \"https://schedules-data.lasa2019.com\";\n  const [codeVisible, setCodeVisibility] = useState(0);\n  \n  function onScheduleJSONChange(newJSONString: string) {\n    setSchedule(newJSONString);\n  }\n\n  function downloadSchedule() {\n    fetch(schedulesEndpoint + \"/schedule.json\")\n      .then(res => res.text())\n      .then(text => setSchedule(text));\n  }\n\n  function changeView(viewNumber: number) {\n    setCodeVisibility(viewNumber);\n  }\n\n  const viewElements = [\n    <EditorComponent onChange={onScheduleJSONChange} value={scheduleString} downloadSchedule={downloadSchedule}></EditorComponent>,\n    <SchedulesEditorComponent onChange={onScheduleJSONChange} value={scheduleString}></SchedulesEditorComponent>\n  ];\n\n  return (\n    <>\n      <NavComponent></NavComponent>\n      <Container className=\"mt-3\">\n        <ViewPicker changeView={changeView} visiblePane={codeVisible}></ViewPicker>\n        <hr />\n        {viewElements[codeVisible]}\n      </Container>\n    </>\n  );\n}\n\nfunction NavComponent() {\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"md\">\n        <Navbar.Brand>LASA Schedules Editor</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"navbar\" />\n        <Navbar.Collapse id=\"navbar\">\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"https://github.com/camtheman256/lasa-schedules-data/blob/master/README.md\" target=\"_blank\">↗ Schedules Documentation</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n}\n\ninterface ViewPickerProps {\n  changeView: Function,\n  visiblePane: number\n}\n\nfunction ViewPicker(props: ViewPickerProps) {\n  \n  const views = [\n    { name: 'JSON Code', value: 0 },\n    { name: 'Graphical Editor', value: 1 }\n  ];\n\n  return (\n    <>\n      <div>\n        <h3 style={{display: \"inline\"}}>Pick a view to edit your schedules:</h3>\n        <ButtonGroup toggle className=\"ml-3\">\n          {views.map((view, idx) => (\n            <ToggleButton\n              key={idx}\n              type=\"radio\"\n              variant=\"primary\"\n              checked={props.visiblePane === view.value}\n              value={view.value}\n              onChange={() => props.changeView(view.value)}\n            >\n              {view.name}\n            </ToggleButton>\n          ))}\n        </ButtonGroup>\n      </div>\n    </>\n  );\n}\n\ninterface EditorProps {\n  onChange: Function,\n  value: string,\n  downloadSchedule: Function\n}\n\nfunction EditorComponent(props: EditorProps) {\n  \n  function editorChange(value: string, event: Event) {\n    props.onChange(value);\n  }\n\n  function downloadSchedule(event: MouseEvent) {\n    props.downloadSchedule();\n  }\n\n  return (\n    <>\n      <h3>Paste your schedules JSON here.</h3>\n      <p><Button variant=\"link\" onClick={downloadSchedule}>Or, download the live schedules from the LASA Schedules API.</Button></p>\n      <AceEditor\n        mode=\"json\"\n        theme=\"github\"\n        value={props.value}\n        onChange={editorChange}\n        width=\"auto\"\n        height=\"750px\"\n        fontSize={14}\n      ></AceEditor>\n    </>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}